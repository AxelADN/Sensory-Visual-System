/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.components;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.io.File;
import java.lang.reflect.ParameterizedType;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import utils.FileUtils;

/**
 *
 * @author HumanoideFilms
 */
public class ListPanel extends javax.swing.JPanel {

    /**
     * Creates new form ListPanel
     */
    public ListPanel() {
        initComponents();
    }

    int numCols;
    int[] columnsToDuplicate;
    Object[] defaultVector;
    int[] copyOrder;
    int[] pasteOrder;
    boolean hasColumnsForDuplicating = false;
    public boolean removeAction = true;
    String clipboardString;
    String filePath;
    String extension;

    //boolean disableSave=false;
    DefaultTableModel model;

    public void setColumnNames(String... names) {
        model = new DefaultTableModel(null, names);
        table.setModel(model);
        numCols = names.length;
        defaultVectorNull();
        defaultCopyPasteOrder();
    }

    public void setClipboardString(String string) {
        clipboardString = string;
    }

    public void setFilePath(String path, String extension) {
        filePath = path;
        this.extension = extension;
    }

    public void setColumnToDuplicate(int... values) {
        columnsToDuplicate = values;
        hasColumnsForDuplicating = true;
    }

    public void setDefaultVector(Object[] vector) {
        defaultVector = vector;
    }

    public void disableSaveButton() {
        saveButton.setVisible(false);
    }

    public void defaultVectorNull() {
        defaultVector = new Object[table.getColumnCount()];
        for (int i = 0; i < defaultVector.length; i++) {
            defaultVector[i] = null;
        }
    }
    
    public void disableEditButtons(){
        addButton.setVisible(false);
        removeButton.setVisible(false);
        duplicateButton.setVisible(false);
        copyButton.setVisible(false);
        pasteButton.setVisible(false);
        upButton.setVisible(false);
        downButton.setVisible(false);
        clearButton.setVisible(false);
        
        jPanel1.remove(addButton);
        jPanel1.remove(removeButton);
        jPanel1.remove(duplicateButton);
        jPanel1.remove(copyButton);
        jPanel1.remove(pasteButton);
        jPanel1.remove(upButton);
        jPanel1.remove(downButton);
        jPanel1.remove(clearButton);
    }

    public void defaultCopyPasteOrder() {
        copyOrder = new int[table.getColumnCount()];
        pasteOrder = new int[table.getColumnCount()];
        for (int i = 0; i < copyOrder.length; i++) {
            copyOrder[i] = i;
            pasteOrder[i] = i;
        }
    }

    public void setCopyOrder(int... indexes) {
        if (indexes.length == copyOrder.length) {
            copyOrder = indexes;
        }
    }

    public void setPasteOrder(int... indexes) {
        if (indexes.length == pasteOrder.length) {
            pasteOrder = indexes;
        }
    }

    void duplicateColumnValues() {
        if (hasColumnsForDuplicating) {
            for (int i = 0; i < table.getRowCount(); i++) {
                for (int c : columnsToDuplicate) {
                    table.setValueAt(table.getValueAt(0, c), i, c);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        duplicateButton = new javax.swing.JButton();
        copyButton = new javax.swing.JButton();
        pasteButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setLayout(new java.awt.GridLayout(9, 1, 10, 10));

        addButton.setBackground(new java.awt.Color(60, 88, 94));
        addButton.setForeground(new java.awt.Color(255, 255, 255));
        addButton.setText("Add row");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addButton);

        removeButton.setBackground(new java.awt.Color(60, 88, 94));
        removeButton.setForeground(new java.awt.Color(255, 255, 255));
        removeButton.setText("Delete row");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        jPanel1.add(removeButton);

        duplicateButton.setBackground(new java.awt.Color(45, 69, 86));
        duplicateButton.setForeground(new java.awt.Color(255, 255, 255));
        duplicateButton.setText("Duplicate");
        duplicateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicateButtonActionPerformed(evt);
            }
        });
        jPanel1.add(duplicateButton);

        copyButton.setBackground(new java.awt.Color(45, 69, 86));
        copyButton.setForeground(new java.awt.Color(255, 255, 255));
        copyButton.setText("Copy");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });
        jPanel1.add(copyButton);

        pasteButton.setBackground(new java.awt.Color(45, 69, 86));
        pasteButton.setForeground(new java.awt.Color(255, 255, 255));
        pasteButton.setText("Paste");
        pasteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteButtonActionPerformed(evt);
            }
        });
        jPanel1.add(pasteButton);

        upButton.setBackground(new java.awt.Color(60, 88, 94));
        upButton.setForeground(new java.awt.Color(255, 255, 255));
        upButton.setText("Up");
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });
        jPanel1.add(upButton);

        downButton.setBackground(new java.awt.Color(60, 88, 94));
        downButton.setForeground(new java.awt.Color(255, 255, 255));
        downButton.setText("Down");
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });
        jPanel1.add(downButton);

        clearButton.setBackground(new java.awt.Color(60, 88, 94));
        clearButton.setForeground(new java.awt.Color(255, 255, 255));
        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        jPanel1.add(clearButton);

        saveButton.setBackground(new java.awt.Color(45, 69, 86));
        saveButton.setForeground(new java.awt.Color(255, 255, 255));
        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jPanel1.add(saveButton);

        add(jPanel1);

        jPanel2.setBackground(new java.awt.Color(75, 75, 75));

        table.setBackground(new java.awt.Color(255, 255, 255));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
        );

        add(jPanel2);
    }// </editor-fold>//GEN-END:initComponents
    boolean empty = true;
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        int row = table.getSelectedRow();
        model.addRow(defaultVector);
        if (!empty && row != -1) {
            //int row = jTable1.getSelectedRow();
            int s = table.getRowCount();
            for (int i = s - 1; i > row; i--) {
                for (int j = 0; j < table.getColumnCount(); j++) {
                    table.setValueAt(table.getValueAt(i - 1, j), i, j);
                }
            }

            for (int j = 0; j < table.getColumnCount(); j++) {
                table.setValueAt(defaultVector[j], row + 1, j);
            }
            table.setRowSelectionInterval(table.getSelectedRow() + 1, table.getSelectedRow() + 1);
        } else {
            table.setRowSelectionInterval(0, 0);
        }
        empty = false;
        duplicateColumnValues();
    }//GEN-LAST:event_addButtonActionPerformed

    
    public void setRow(Object[] values){
        int row = table.getSelectedRow();
        model.addRow(values);
        if (!empty && row != -1) {
            //int row = jTable1.getSelectedRow();
            int s = table.getRowCount();
            for (int i = s - 1; i > row; i--) {
                for (int j = 0; j < table.getColumnCount(); j++) {
                    table.setValueAt(table.getValueAt(i - 1, j), i, j);
                }
            }

            for (int j = 0; j < table.getColumnCount(); j++) {
                table.setValueAt(values[j], row + 1, j);
            }
            table.setRowSelectionInterval(table.getSelectedRow() + 1, table.getSelectedRow() + 1);
        } else {
            table.setRowSelectionInterval(0, 0);
        }
        empty = false;
        duplicateColumnValues();
    }
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // TODO add your handling code here:   
        if (removeAction) {
            removeRow();
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    public void removeRow() {
        int row = table.getSelectedRow();
        if (row != -1 && !empty) {
            model.removeRow(table.getSelectedRow());
            if (table.getRowCount() <= 0) {
                empty = true;
            } else {
                if (row > 0) {
                    table.setRowSelectionInterval(row - 1, row - 1);
                } else {
                    table.setRowSelectionInterval(0, 0);
                }
            }

        }
        duplicateColumnValues();
    }
    private void duplicateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicateButtonActionPerformed
        // TODO add your handling code here:
        Object[] rowData = new Object[numCols];
        for (int i = 0; i < numCols; i++) {
            rowData[i] = null;
        }
        model.addRow(defaultVector);
        int row = table.getSelectedRow();
        int s = table.getRowCount();
        for (int i = s - 1; i > row; i--) {
            for (int j = 0; j < table.getColumnCount(); j++) {
                table.setValueAt(table.getValueAt(i - 1, j), i, j);
            }
        }

        for (int j = 0; j < table.getColumnCount(); j++) {
            table.setValueAt(table.getValueAt(row, j), row + 1, j);
        }
        table.setRowSelectionInterval(table.getSelectedRow() + 1, table.getSelectedRow() + 1);
        duplicateColumnValues();
    }//GEN-LAST:event_duplicateButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        // TODO add your handling code here:
        int row = table.getSelectedRow();
        Object[] rowData = new Object[numCols];
        for (int i = 0; i < numCols; i++) {
            rowData[i] = table.getValueAt(row, i);
        }
        if (row < table.getRowCount()) {
            if (table.getSelectedRow() > 0) {
                for (int i = 0; i < table.getColumnCount(); i++) {
                    table.setValueAt(table.getValueAt(row - 1, i), row, i);
                }
                for (int i = 0; i < table.getColumnCount(); i++) {
                    table.setValueAt(rowData[i], row - 1, i);
                }

                table.setRowSelectionInterval(row - 1, row - 1);
            }
        }
    }//GEN-LAST:event_upButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        // TODO add your handling code here:
        int row = table.getSelectedRow();
        Object[] rowData = new Object[numCols];
        for (int i = 0; i < numCols; i++) {
            rowData[i] = table.getValueAt(row, i);
        }
        if (row < table.getRowCount() - 1) {
            for (int i = 0; i < table.getColumnCount(); i++) {
                table.setValueAt(table.getValueAt(row + 1, i), row, i);
            }
            for (int i = 0; i < table.getColumnCount(); i++) {
                table.setValueAt(rowData[i], row + 1, i);
            }
            if (table.getSelectedRow() < table.getRowCount()) {
                table.setRowSelectionInterval(row + 1, row + 1);
            }
        }
    }//GEN-LAST:event_downButtonActionPerformed

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        // TODO add your handling code here:
        copy();
        duplicateColumnValues();
    }//GEN-LAST:event_copyButtonActionPerformed

    public void copy() {
        try {
            int row = table.getSelectedRow();
            String cString = clipboardString + " ";
            for (int i = 0; i < table.getColumnCount(); i++) {
                cString = cString + table.getValueAt(row, copyOrder[i]);
                if (i < table.getColumnCount() - 1) {
                    cString = cString + " ";
                }
            }
            StringSelection stringSelection = new StringSelection(cString);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
        } catch (Exception ex) {
        }
    }

    private void pasteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteButtonActionPerformed
        // TODO add your handling code here:
        paste();
    }//GEN-LAST:event_pasteButtonActionPerformed

    public void paste(){
        Clipboard cb = Toolkit.getDefaultToolkit().getSystemClipboard();
        Transferable t = cb.getContents(this);

        DataFlavor dataFlavorStringJava;
        try {
            dataFlavorStringJava = new DataFlavor("application/x-java-serialized-object; class=java.lang.String");
            if (t.isDataFlavorSupported(dataFlavorStringJava)) {
                String texto = (String) t.getTransferData(dataFlavorStringJava);
                if (texto.contains(clipboardString)) {
                    int row = table.getSelectedRow();
                    String values[] = texto.split(" ");
                    for (int i = 0; i < table.getColumnCount(); i++) {
                        if (pasteOrder[i] >= 0) {
                            table.setValueAt(values[pasteOrder[i]+1], row, i);
                        }
                    }
                }
            }
        } catch (Exception ex) {

        }
        duplicateColumnValues();
    }
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        if (filePath != null && extension != null) {
            save();
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void tableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableKeyReleased
        // TODO add your handling code here:
        duplicateColumnValues();
    }//GEN-LAST:event_tableKeyReleased

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        removeAllRows();
    }//GEN-LAST:event_clearButtonActionPerformed

    public void save() {
        String saveString = "";
        for (int i = 0; i < table.getRowCount(); i++) {
            if (CompleteRow(i)) {
                for (int j = 0; j < table.getColumnCount(); j++) {
                    saveString = saveString + table.getValueAt(i, j);
                    if (j < table.getColumnCount() - 1) {
                        saveString = saveString + " ";
                    }
                }
                if (i < table.getRowCount() - 1) {
                    saveString = saveString + "\n";
                }
            }
        }
        FileUtils.write(filePath, saveString, extension);
    }

    public void loadFile() {
        File file = new File(filePath + "." + extension);
        if (file.exists()) {
            removeAllRows();
            String fileContent = FileUtils.readFile(file);
            String lines[] = fileContent.split("\\n");
            if (lines.length > 0) {
                empty = false;
            }
            for (int i = 0; i < lines.length; i++) {
                Object[] rowData = new Object[numCols];
                int row = table.getSelectedRow();
                for (int k = 0; k < numCols; k++) {
                    rowData[k] = null;
                }
                model.addRow(rowData);
            }
            for (int i = 0; i < table.getRowCount(); i++) {
                String values[] = lines[i].split(" ");
                for (int j = 0; j < table.getColumnCount(); j++) {
                    table.setValueAt(values[j], i, j);
                }
            }
            table.setRowSelectionInterval(0, 0);
        }
    }

    public void removeAllRows() {
        for (int i = table.getRowCount() - 1; i >= 0; i--) {
            model.removeRow(i);
        }
    }

    public boolean CompleteRow(int row) {
        boolean band = true;
        for (int i = 0; i < table.getColumnCount(); i++) {
            if (table.getValueAt(row, i) == null) {
                band = false;
                break;
            }
        }
        return band;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton copyButton;
    private javax.swing.JButton downButton;
    public javax.swing.JButton duplicateButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JButton pasteButton;
    public javax.swing.JButton removeButton;
    private javax.swing.JButton saveButton;
    public javax.swing.JTable table;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables
}
