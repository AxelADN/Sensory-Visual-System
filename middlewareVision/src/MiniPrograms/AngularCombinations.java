/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MiniPrograms;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import utils.Config;

/**
 *Class for graphically choosing the angular combinations over the angular patches of V2
 */
public class AngularCombinations extends javax.swing.JFrame {

    RFGeneratorNew rfg;
    String comb = "a0-16";
    GraphPanel gpanel;
    String eyeIndex = "";
    int r1;
    int r2;

    /**
     * Creates new form AngularCombinations
     */
    public AngularCombinations(RFGeneratorNew rfg) {
        this();
        this.rfg = rfg;

    }

    /**
     * Constructor
     */
    public AngularCombinations() {
        initComponents();
        gpanel = new GraphPanel(this);
        gpanel.setVisible(true);
        gpanel.setSize(150, 150);
        gpanel.setLocation(0, 0);
        jPanel1.add(gpanel);
        gpanel.setPart(comb);
        setEyeIndex(comb);
        buttonGroup1.add(left);
        buttonGroup1.add(right);
        buttonGroup1.add(both);
        repaint();
    }

    /**
     * It sets the combination from a text, it will receive the text and then
     * the graphical form of the combination is displayed
     * @param c corresponds to the combination name
     */
    public void setComb(String c) {
        comb = c;
        setEyeIndex(comb);
        gpanel.setPart(comb);        
        repaint();
    }

    /**
     * It sets the eye index, the combination name includes the index of the eye
     * @param st combination string
     */
    void setEyeIndex(String st) {
        eyeIndex = "" + st.charAt(1);
        if (eyeIndex.equals("0")) {
            left.setSelected(true);
        }
        if (eyeIndex.equals("1")) {
            right.setSelected(true);
        }
        if (eyeIndex.equals("b")) {
            both.setSelected(true);
        }

        label();
    }

    int i1 = -1;
    int i2 = -1;

    /**
     * It sets the combination text to the label that displays the combination<br>
     * @param n1 number or index of the angular aperture
     * @param n2 index of the angular direction
     */
    public void label(int n1, int n2) {
        i1 = n1;
        i2 = n2;
        jLabel1.setText("a" + eyeIndex + "-" + i1 + "" + i2);
    }

    /**
     * Update the label text
     */
    public void label() {
        jLabel1.setText("a" + eyeIndex + "-" + i1 + "" + i2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        both = new javax.swing.JRadioButton();
        left = new javax.swing.JRadioButton();
        right = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Angular combinations");
        setAlwaysOnTop(true);

        jPanel1.setBackground(new java.awt.Color(59, 59, 59));
        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(150, 209, 157));
        jLabel1.setText("name");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(180, 70, 62, 31);

        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setText("Eye:");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(180, 0, 130, 16);

        both.setForeground(new java.awt.Color(204, 204, 204));
        both.setText("Both");
        both.setEnabled(false);
        both.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bothActionPerformed(evt);
            }
        });
        jPanel1.add(both);
        both.setBounds(310, 20, 80, 28);

        left.setForeground(new java.awt.Color(204, 204, 204));
        left.setText("Default");
        left.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftActionPerformed(evt);
            }
        });
        jPanel1.add(left);
        left.setBounds(180, 20, 60, 28);

        right.setForeground(new java.awt.Color(204, 204, 204));
        right.setText("Right");
        right.setEnabled(false);
        right.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightActionPerformed(evt);
            }
        });
        jPanel1.add(right);
        right.setBounds(240, 20, 70, 28);

        jButton1.setBackground(new java.awt.Color(92, 119, 137));
        jButton1.setForeground(new java.awt.Color(0, 0, 0));
        jButton1.setText("Apply");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(180, 110, 100, 32);

        jLabel3.setForeground(new java.awt.Color(204, 204, 204));
        jLabel3.setText("Combination name:");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(180, 50, 130, 16);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void leftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftActionPerformed
        // TODO add your handling code here:
        if (left.isSelected()) {
            eyeIndex = "" + 0;
            label();
        }
    }//GEN-LAST:event_leftActionPerformed

    private void rightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightActionPerformed
        // TODO add your handling code here:
        if (right.isSelected()) {
            eyeIndex = "" + 1;
            label();
        }
    }//GEN-LAST:event_rightActionPerformed

    private void bothActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bothActionPerformed
        // TODO add your handling code here:
        if (both.isSelected()) {
            eyeIndex = "b";
            label();
        }
    }//GEN-LAST:event_bothActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        rfg.addComb(jLabel1.getText());
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AngularCombinations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AngularCombinations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AngularCombinations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AngularCombinations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AngularCombinations().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton both;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton left;
    private javax.swing.JRadioButton right;
    // End of variables declaration//GEN-END:variables
}

/**
 * Class that contains the graphical panel that displays the angular combination
 * @author Luis Parra
 */
class GraphPanel extends javax.swing.JPanel implements MouseMotionListener, MouseListener {

    AngularCombinations ac;

    
    int directions = Config.gaborOrientations*2;
    Part[] parts;
    int w = 150;
    int dx = 0;
    int dy = 0;
    int radius = w / 2;
    int x = 0;
    int y = 0;
    double anglediv = (2 * Math.PI) / directions;
    Pair[] pairs;

    /**
     * It sets the parts for drawing in the panel<br>
     * parts are the lines into which the circle is divided
     * @param ac angular combination frame
     */
    public GraphPanel(AngularCombinations ac) {
        this.ac = ac;
        parts = new Part[directions];
        for (int i = 0; i < directions; i++) {
            parts[i] = new Part(dx + radius + (int) (radius * Math.cos(anglediv * i - Math.PI / 2)), dy + radius + (int) (radius * Math.sin(anglediv * i - Math.PI / 2)), i);
        }
        pairs = new Pair[(directions / 2) * directions];
        int c = 0;

        for (int i = 0; i < directions / 2; i++) {
            for (int j = 0; j < directions; j++) {
                pairs[c] = new Pair(j, (j + i + 1) % directions, i, j);
                c++;
            }
        }

        setBackground(Color.BLACK);
        addMouseListener(this);
        addMouseMotionListener(this);
        repaint();
    }

    Part nearP = null;
    Part p1 = null;
    Part p2 = null;

    /**
     * Paint method, it draws the angular parts and the selected pair of lines
     * @param g 
     */
    public void paintComponent(Graphics g) {
        Graphics2D g2d = (Graphics2D) g;
        g2d.setStroke(new BasicStroke(1));
        GradientPaint deg = new GradientPaint(0, 0, new Color(50, 50, 50), 0, 200, new Color(0, 0, 0), true);
        g2d.setPaint(deg);
        //g.setColor(new Color(50, 50, 50));
        g.fillRect(dx, dy, w, w);

        g.setColor(new Color(181, 123, 47));
        if (nearP != null) {
            g.drawLine(dx + radius, dy + radius, nearP.x, nearP.y);
        }
        //g.setColor(new Color(87, 177, 195));
        GradientPaint deg2 = new GradientPaint(0, 0, new Color(36, 77, 85), 0, 30, new Color(159, 213, 223), true);
        g2d.setPaint(deg2);
        g2d.setStroke(new BasicStroke(3));
        if (p1 != null) {
            g2d.drawLine(dx + radius, dy + radius, p1.x, p1.y);
        }
        if (p2 != null) {
            g2d.drawLine(dx + radius, dy + radius, p2.x, p2.y);
        }

    }

    /**
     * set the pairs from the combination string
     * @param comb 
     */
    public void setPart(String comb) {
        p1 = null;
        p2 = null;
        try{
        if (comb.length() > 2) {
            String ar[] = comb.split("-");
            int i1 = Integer.parseInt("" + ar[1].charAt(0));
            int i2 = Integer.parseInt("" + ar[1].charAt(1));
            for (int i = 0; i < pairs.length; i++) {
                if (pairs[i].r1 == i1 && pairs[i].r2 == i2) {
                    getPart(pairs[i].n1, pairs[i].n2);
                    ac.label(pairs[i].r1, pairs[i].r2);
                    break;
                }
            }
            repaint();
        }
        }catch(Exception ex){}
    }

    /**
     * get the line part from the index n1 and n2 from the combination string
     * @param n1 index n1
     * @param n2 index n2
     */
    public void getPart(int n1, int n2) {
        for (int i = 0; i < parts.length; i++) {
            if (parts[i].index == n1) {
                p1 = parts[i];
            }
            if (parts[i].index == n2) {
                    p2 = parts[i];
            }
        }
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    double angle = 0;
    double difx = 0;
    double dify = 0;

    @Override
    public void mouseMoved(MouseEvent e) {
        try {
            x = e.getX();
            y = e.getY();
            difx = -(dx + radius) + x;
            dify = (dy + radius) - y;
            angle = Math.atan2(dify, difx);
            nearP = nearPart(x, y);
            repaint();
        } catch (Exception ex) {

        }

    }

    /**
     * It finds the nearest part from the mouse
     * @param x position x of the mouse
     * @param y position y of the mouse
     * @return the nearest part from the mouse
     */
    Part nearPart(int x, int y) {
        double lessDistance = 10000;
        Part near = null;
        for (int i = 0; i < parts.length; i++) {
            if (parts[i].calcDistance(x, y) < lessDistance) {
                lessDistance = parts[i].calcDistance(x, y);
                near = parts[i];
            }
        }
        return near;
    }
    boolean sw = false;

    @Override
    public void mouseClicked(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

    }

    int r1 = -1;
    int r2 = -1;

    @Override
    public void mousePressed(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

        if (!sw) {
            if (p2 != null) {
                p2 = null;
            }
            p1 = nearP;
            sw = true;
        } else {
            p2 = nearP;
            sw = false;
            for (int i = 0; i < pairs.length; i++) {
                if ((p1.index == pairs[i].n1 && p2.index == pairs[i].n2) || (p1.index == pairs[i].n2 && p2.index == pairs[i].n1)) {
                    r1 = pairs[i].r1;
                    r2 = pairs[i].r2;
                    ac.label(r1, r2);
                }
            }

        }
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseExited(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        nearP = null;
        repaint();
    }
}

class Part {

    int index;
    int x;
    int y;
    double distance;

    /**
     * Creates an object of the class part, which are essentially a line with an
     * index 
     * @param x x position
     * @param y y position
     * @param index index
     */
    public Part(int x, int y, int index) {
        this.index = index;
        this.x = x;
        this.y = y;
    }

    /**
     * It calculates the distance from the mouse and the end point of the part
     * @param x2 x position from the mouse
     * @param y2 y position from the mouse
     * @return the distance
     */
    double calcDistance(int x2, int y2) {
        return Math.sqrt(Math.pow(x2 - x, 2) + Math.pow(y2 - y, 2));
    }
}

/**
 * Class for representing the relation between the part index and the indexes of
 * the combination string
 * @author HumanoideFilms
 */
class Pair {

    int n1;
    int n2;
    int r1;
    int r2;

    
    public Pair(int n1, int n2, int r1, int r2) {
        this.n1 = n1;
        this.n2 = n2;
        this.r1 = r1;
        this.r2 = r2;
    }
}
